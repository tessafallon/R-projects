fromurl<- function(finalurl) {
output <-file('raw.txt')
# download webpage and parse JSON object
web <- getURL(finalurl)
raw <-fromJSON(web)
high <- raw$forecast$simpleforecast$forecastday[[2]]$high['farenheit']
low <- raw$forecast$simpleforecast$forecastday[[2]]$low['farenheit']
condition <- raw$forecast$simpleforecast$forecastday[[2]]$conditions
currenttemp <- raw$current_observation$temp_f
currentweather <- raw$current_observation$weather
city <- as.character(raw$current_observation$display_location['full'])
result <-list(city=city,current=paste(currenttemp,'°F ',currentweather,sep=''),tomorrow=paste(high,'°F','-',low,'°F ',condition,sep=''))
names(result) <-c('city','current', 'tomorrow')
return(result)
}
fromurl(url)
raw
library(RCurl)
library(RJSONIO)
# "mykey" might need to be changed. Create your own if it doesn't work.
mykey <- 'a98d04ac43156c84'
url <- paste0('http://api.wunderground.com/api/', mykey,'/conditions/forecast/q/autoip.json')
myraw <- NA
fromurl<- function(finalurl) {
# download webpage and parse JSON object
web <- getURL(finalurl)
raw <-fromJSON(web)
myraw <<-raw
high <- raw$forecast$simpleforecast$forecastday[[2]]$high['farenheit']
low <- raw$forecast$simpleforecast$forecastday[[2]]$low['farenheit']
condition <- raw$forecast$simpleforecast$forecastday[[2]]$conditions
currenttemp <- raw$current_observation$temp_f
currentweather <- raw$current_observation$weather
city <- as.character(raw$current_observation$display_location['full'])
result <-list(city=city,current=paste(currenttemp,'°F ',currentweather,sep=''),tomorrow=paste(high,'°F','-',low,'°F ',condition,sep=''))
names(result) <-c('city','current', 'tomorrow')
return(result)
}
fromurl(url)
as.character(myraw)
output <-file('myraw.txt')
url
raw$current_observation$UV
finalurl=url
web <- getURL(finalurl)
raw <-fromJSON(web)
myraw <<-raw
myraw <-raw
raw$current_observation
raw$current_observation$uv
raw$current_observation$UV
url
finalurl
raw
raw$current_observation$feelslike_string
library(RCurl)
library(RJSONIO)
# "mykey" might need to be changed. Create your own if it doesn't work.
mykey <- 'a98d04ac43156c84'
url <- paste0('http://api.wunderground.com/api/', mykey,'/conditions/forecast/q/autoip.json')
fromurl<- function(finalurl) {
# download webpage and parse JSON object
web <- getURL(finalurl)
raw <-fromJSON(web)
high <- raw$forecast$simpleforecast$forecastday[[2]]$high['farenheit']
low <- raw$forecast$simpleforecast$forecastday[[2]]$low['farenheit']
condition <- raw$forecast$simpleforecast$forecastday[[2]]$conditions
currenttemp <- raw$current_observation$temp_f
currentweather <- raw$current_observation$weather
city <- as.character(raw$current_observation$display_location['full'])
result <-list(city=city,current=paste(currenttemp,'°F ',currentweather,sep=''),tomorrow=paste(high,'°F','-',low,'°F ',condition,sep=''))
names(result) <-c('city','current', 'tomorrow')
return(result)
}
fromurl(url)
url
finalurl
$raw$current_observation
raw$current_observation
install.packages("WDI")
install.packages("quantmod")
install.packages("twitteR")
twitterR
??.twitterR
??.twitterR
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(WDI)
DF <- WDI(country=c("CN","RU","BR","ZA","IN"),
indicator="NY.GDP.MKTP.KD.ZG",
start=1990, end=2012)
head(DF,2)
ggplot(DF, aes(year, NY.GDP.MKTP.KD.ZG, color=country))+
geom_line()+geom_point()+xlab("Year")+
ggtitle("Annual GDP Growth rate (%)")+ylab("")
DF
library(ggplot2)
library(WDI)
DF <- WDI(country=c("CN","RU","BR","ZA","IN"),
indicator="NY.GDP.MKTP.KD.ZG",
start=1990, end=2012)
head(DF,2)
ggplot(DF, aes(year, NY.GDP.MKTP.KD.ZG, color=country))+
geom_point()+xlab("Year")+
ggtitle("Annual GDP Growth rate (%)")+ylab("")
candleChart(last(MS,'6 months'),theme='white',TA=NULL)
library(quantmod); options(getSymbols.auto.assign = FALSE)
MS <- getSymbols("MSFT",from = '2010-01-01',to='2012-02-14')
candleChart(last(MS,'6 months'),theme='white',TA=NULL)
library(quantmod); options(getSymbols.auto.assign = FALSE)
MS <- getSymbols("MSFT",from = '2012-01-01',to='2014-02-14')
candleChart(last(MS,'6 months'),theme='white',TA=NULL)
install.packages("XML")
library(XML)
# choose a fast mirror
url <- 'http://mirrors.ustc.edu.cn/CRAN/web/packages/available_packages_by_date.html'
tables <- readHTMLTable(url,
stringsAsFactors = FALSE,
header=T)
data <- tables[[1]]
data[2,]
res <- nchar(data[,2])
# summary(res)
hist(res)
res
library(XML)
url <- "http://www.w3schools.com/xml/plant_catalog.xml"
xmlfile <- xmlTreeParse(url) # download and parse xml
class(xmlfile)
xmltop <- xmlRoot(xmlfile) # get root node
xmlValue(xmltop[[1]][[1]]) # get some leaf node data
xmlValue(xmltop[['PLANT']][['COMMON']])
# get data from first children of xmltop
xmlSApply(xmltop[[1]],xmlValue)
# get data from each of the children of XMLNode
plantcat <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
# convert to a dataframe
plantcat_df <- data.frame(t(plantcat),row.names=NULL)
plantcat_df[1:5,1:4]
plantcat_df
plantcat_df[36,1:4]
plantcat_df[36,1:6]
plantcat_df(length)
plantcat_df[length]
length(plantcat_df)
plantcat_df[2]
plantcat_df[36, 2]
plantcat_df[36, 1]
plantcat_df[36, 1:1]
plantcat_df[36,:1]
plantcat_df[36, :1]
dimnesion(plantcat_df)
dimension(plantcat_Df)
dimension(plantcat_df)
dim(plantcat_df)
plantcat_df[36,1]
plantcat_df[36,0:1]
plantcat[10,]
plancat_df[10]
plantcat[10]
plantcat['Shooting Star']
plantcat[10,'Shooting Star']
plantcat_df[10, 'Shooting Star']
plantcat_df['Shooting Star', 10]
plantcat_df(NAME='Shooting Star')
plantcat_df[NAME='Shooting Star']
plantcat_df$NAME="ShootingStar"
substr(plantcat_df$PRICE,2,5)
as.numerica(substr(plantcat_df$PRICE,2,5))
as.numeric(substr(plantcat_df$PRICE,2,5))
as.numeric(substr(plantcat_df$PRICE,2,5)>5)
sum(as.numeric(substr(plantcat_df$PRICE,2,5)>5))
plantcat_df$NAME
plantcat_df
library(XML)
url <- "http://www.w3schools.com/xml/plant_catalog.xml"
xmlfile <- xmlTreeParse(url) # download and parse xml
class(xmlfile)
xmltop <- xmlRoot(xmlfile) # get root node
xmlValue(xmltop[[1]][[1]]) # get some leaf node data
xmlValue(xmltop[['PLANT']][['COMMON']])
# get data from first children of xmltop
xmlSApply(xmltop[[1]],xmlValue)
# get data from each of the children of XMLNode
plantcat <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
# convert to a dataframe
plantcat_df <- data.frame(t(plantcat),row.names=NULL)
plantcat_df
plantcat_df$NAME
plantcat_df$NAME
plantcat_df
plantcat_df[1]
plantcat_df[COMMON=]
plantcat_df$COMMON
plantcat_df$NAME='Shooting Star'
plantcat_df$NAME
plantcat_df$NAME,2
plantcat_df[plantcat_df$COMMON=='Shooting Star']
plantcat_df[plantcat_df$COMMON=='Shooting Star',]
plantcat_df[plantcat_df$COMMON=='Shooting Star',$PRICE]
plantcat_df[plantcat_df$COMMON=='Shooting Star'$PRICE]
library(RCurl)
library(XML)
url <-'http://www.imdb.com/title/tt0111161/criticreviews?ref_=tt_ov_rt'
raw <- getURL(url)
data <- htmlParse(raw)
# get the first text
# you can get the xpath from chrome
xpath <- '//*[@id="main"]/div[1]/table/tbody/tr[1]/td[2]/div'
getNodeSet(data,xpath)
# get all text
xpath <- '//tr[@itemprop="reviews"]/td[2]/div'
nodes <- getNodeSet(data,xpath)
text <- sapply(nodes,xmlValue)
text
# import packages or install them if they don't exist [helper written by @Shane from stackoverflow]
install.packages("yaml")
install.packages("RMySQL")
#!/usr/bin/env Rscript
###############################
## define team name          ##
team_name <- "betternauts"   ##
###############################
# import packages or install them if they don't exist [helper written by @Shane from stackoverflow]
list.of.packages <- c("yaml", "RMySQL")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos='http://cran.us.r-project.org')
require(yaml)
require(RMySQL)
# define the yml (properties) file, read it in as a list
config_file_path <- "~/rwiz.yml"
print(paste("Using config yml: ", config_file_path))
config <- yaml.load_file(config_file_path)
# define the output parent directory
output_parent_dir <- config$rwizflowy.folders$outputdirectory
# build team path directory name
team_path <- paste0(output_parent_dir,team_name)
# create a team directory in symlink to s3 bucket (just a warning if it already exists)
system(sprintf("mkdir %s",team_path))
# set this new directory as your working directory so all of your outputs will write to it
setwd(team_path)
# define the yml (properties) file, read it in as a list
config_file_path <- "~/rwiz.yml"
print(paste("Using config yml: ", config_file_path))
config <- yaml.load_file(config_file_path)
# set up db con function
dbCon <- function(dbname, user, password, host="localhost", port=3306){
dbcon <- dbConnect("MySQL", dbname=dbname, user=user,
password=password, host=host, port=port)
dbcon
}
# define connection using the yml properties
con <- dbCon(config$rwizflowy.db.rwizflowy$name,
config$rwizflowy.db.rwizflowy$username,
config$rwizflowy.db.rwizflowy$password,
config$rwizflowy.db.rwizflowy$host,
config$rwizflowy.db.rwizflowy$port)
# construct query
user_info_query <- "SELECT * from rwizflowy.user_info;"
# run the query
user_info <- dbGetQuery(con, user_info_query)
# tell R which columns are dates (they come in as characters by default)
# [as.POSIXlt() is R's way of saying as.Datetime]
user_info$user_signup_started_date <- as.POSIXlt(user_info$user_signup_started_date)
user_info$user_signup_completed_date <- as.POSIXlt(user_info$user_signup_completed_date)
user_info$user_initial_deposit_date <- as.POSIXlt(user_info$user_initial_deposit_date)
# scatter plot, age vs current balance
png(filename="scatterplot_with_lm_example.png", width=1440, height=950)
plot(user_info$user_age, log10(user_info$user_current_balance), main="Scatterplot Example",
xlab="User Age ", ylab="Log10 of Current Balance (# is tens place)", pch=20)
# add a simple linear regression on top.  Note: this is a terrible example to throw an lm on top... but whatevs.
reg1 <- lm(log10(user_info$user_current_balance)~user_info$user_age)
# plot the regression on top of the chart
abline(reg1, col="red")
dev.off()
#!/usr/bin/env Rscript
###############################
## define team name          ##
team_name <- "betternauts"   ##
###############################
# import packages or install them if they don't exist [helper written by @Shane from stackoverflow]
list.of.packages <- c("yaml", "RMySQL")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos='http://cran.us.r-project.org')
require(yaml)
require(RMySQL)
# define the yml (properties) file, read it in as a list
config_file_path <- "~/rwiz.yml"
print(paste("Using config yml: ", config_file_path))
config <- yaml.load_file(config_file_path)
# define the output parent directory
output_parent_dir <- config$rwizflowy.folders$outputdirectory
# build team path directory name
team_path <- paste0(output_parent_dir,team_name)
# create a team directory in symlink to s3 bucket (just a warning if it already exists)
system(sprintf("mkdir %s",team_path))
# set this new directory as your working directory so all of your outputs will write to it
setwd(team_path)
# define the yml (properties) file, read it in as a list
config_file_path <- "~/rwiz.yml"
print(paste("Using config yml: ", config_file_path))
config <- yaml.load_file(config_file_path)
# set up db con function
dbCon <- function(dbname, user, password, host="localhost", port=3306){
dbcon <- dbConnect("MySQL", dbname=dbname, user=user,
password=password, host=host, port=port)
dbcon
}
# define connection using the yml properties
con <- dbCon(config$rwizflowy.db.rwizflowy$name,
config$rwizflowy.db.rwizflowy$username,
config$rwizflowy.db.rwizflowy$password,
config$rwizflowy.db.rwizflowy$host,
config$rwizflowy.db.rwizflowy$port)
# construct query
user_info_query <- "SELECT * from rwizflowy.user_info;"
# run the query
user_info <- dbGetQuery(con, user_info_query)
# tell R which columns are dates (they come in as characters by default)
# [as.POSIXlt() is R's way of saying as.Datetime]
user_info$user_signup_started_date <- as.POSIXlt(user_info$user_signup_started_date)
user_info$user_signup_completed_date <- as.POSIXlt(user_info$user_signup_completed_date)
user_info$user_initial_deposit_date <- as.POSIXlt(user_info$user_initial_deposit_date)
# scatter plot, age vs current balance
png(filename="scatterplot_with_lm_example.png", width=1440, height=950)
plot(user_info$user_age, log10(user_info$user_current_balance), main="Scatterplot Example",
xlab="User Age ", ylab="Log10 of Current Balance (# is tens place)", pch=20)
# add a simple linear regression on top.  Note: this is a terrible example to throw an lm on top... but whatevs.
reg1 <- lm(log10(user_info$user_current_balance)~user_info$user_age)
# plot the regression on top of the chart
abline(reg1, col="red")
dev.off()
# import packages or install them if they don't exist [helper written by @Shane from stackoverflow]
list.of.packages <- c("yaml", "ggplot2", "RMySQL", "maps", "plyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos='http://cran.us.r-project.org')
require(yaml)
require(ggplot2)
require(RMySQL)
require(maps)
require(plyr)
# define the yml (properties) file, read it in as a list
config_file_path <- "~/rwiz.yml"
print(paste("Using config yml: ", config_file_path))
config <- yaml.load_file(config_file_path)
# define the output parent directory
output_parent_dir <- config$rwizflowy.folders$outputdirectory
# build team path directory name
team_path <- paste0(output_parent_dir,team_name)
# create a team directory in symlink to s3 bucket (just a warning if it already exists)
system(sprintf("mkdir %s",team_path))
# set this new directory as your working directory so all of your outputs will write to it
setwd(team_path)
###############################
# import packages or install them if they don't exist [helper written by @Shane from stackoverflow]
list.of.packages <- c("yaml", "ggplot2", "RMySQL", "maps", "plyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos='http://cran.us.r-project.org')
require(yaml)
require(ggplot2)
require(RMySQL)
require(maps)
require(plyr)
# define the yml (properties) file, read it in as a list
config_file_path <- "~/rwiz.yml"
print(paste("Using config yml: ", config_file_path))
config <- yaml.load_file(config_file_path)
# define the yml (properties) file, read it in as a list
config_file_path <- "~/desktop/rwiz.yml"
print(paste("Using config yml: ", config_file_path))
config <- yaml.load_file(config_file_path)
# define the yml (properties) file, read it in as a list
config_file_path <- "~/desktop/ygoldman/travis.yml"
print(paste("Using config yml: ", config_file_path))
config <- yaml.load_file(config_file_path)
# define the yml (properties) file, read it in as a list
config_file_path <- "~/desktop/rwizflowy/travis.yml"
print(paste("Using config yml: ", config_file_path))
config <- yaml.load_file(config_file_path)
config_file_path <- "~/desktop/rwizflowy/.travis.yml"
print(paste("Using config yml: ", config_file_path))
config <- yaml.load_file(config_file_path)
# define the output parent directory
output_parent_dir <- config$rwizflowy.folders$outputdirectory
# build team path directory name
team_path <- paste0(output_parent_dir,team_name)
# create a team directory in symlink to s3 bucket (just a warning if it already exists)
system(sprintf("mkdir %s",team_path))
# set this new directory as your working directory so all of your outputs will write to it
setwd(team_path)
# set up db con function
dbCon <- function(dbname, user, password, host="localhost", port=3306){
dbcon <- dbConnect("MySQL", dbname=dbname, user=user,
password=password, host=host, port=port)
dbcon
}
# define connection using the yml properties
con <- dbCon(config$rwizflowy.db.rwizflowy$name,
config$rwizflowy.db.rwizflowy$username,
config$rwizflowy.db.rwizflowy$password,
config$rwizflowy.db.rwizflowy$host,
config$rwizflowy.db.rwizflowy$port)
dbCon <- function(dbname, user, password, host="localhost", port=3306){
dbcon <- dbConnect("MySQL", dbname=dbname, user=user,
password=password, host=host, port=3306)
dbcon
}
# define connection using the yml properties
con <- dbCon(config$rwizflowy.db.rwizflowy$name,
config$rwizflowy.db.rwizflowy$username,
config$rwizflowy.db.rwizflowy$password,
config$rwizflowy.db.rwizflowy$host,
config$rwizflowy.db.rwizflowy$port)
# construct query
user_info_query <- "SELECT * from user_info;"
# run the query
user_info <- dbGetQuery(con, user_info_query)
#!/usr/bin/env Rscript
###############################
## define team name          ##
team_name <- "tessa2"   ##
###############################
# import packages or install them if they don't exist [helper written by @Shane from stackoverflow]
list.of.packages <- c("yaml", "ggplot2", "RMySQL", "maps", "plyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos='http://cran.us.r-project.org')
require(yaml)
require(ggplot2)
require(RMySQL)
require(maps)
require(plyr)
# define the yml (properties) file, read it in as a list
config_file_path <- "~/rwiz.yml"
print(paste("Using config yml: ", config_file_path))
config <- yaml.load_file(config_file_path)
# define the output parent directory
output_parent_dir <- config$rwizflowy.folders$outputdirectory
# build team path directory name
team_path <- paste0(output_parent_dir,team_name)
# create a team directory in symlink to s3 bucket (just a warning if it already exists)
system(sprintf("mkdir %s",team_path))
# set this new directory as your working directory so all of your outputs will write to it
setwd(team_path)
# set up db con function
dbCon <- function(dbname, user, password, host="localhost", port=3306){
dbcon <- dbConnect("MySQL", dbname=dbname, user=user,
password=password, host=host, port=port)
dbcon
}
# define connection using the yml properties
con <- dbCon(config$rwizflowy.db.rwizflowy$name,
config$rwizflowy.db.rwizflowy$username,
config$rwizflowy.db.rwizflowy$password,
config$rwizflowy.db.rwizflowy$host,
config$rwizflowy.db.rwizflowy$port)
# construct query
user_info_query <- "SELECT * from user_info;"
# run the query
user_info <- dbGetQuery(con, user_info_query)
# tell R which columns are dates (they come in as characters by default)
# [as.POSIXlt() is R's way of saying as.Datetime]
user_info$user_signup_started_date <- as.POSIXlt(user_info$user_signup_started_date)
user_info$user_signup_completed_date <- as.POSIXlt(user_info$user_signup_completed_date)
user_info$user_initial_deposit_date <- as.POSIXlt(user_info$user_initial_deposit_date)
# get state shape file from maps package
states_info <- map_data("state")
# get rid of that pesky Washington DC. It's not good for much anyway.
states_info = subset(states_info,group!=8)
# attach state abbreviations for merging to our data
states_info$st <- state.abb[match(states_info$region,tolower(state.name))]
# summarize data by state (sum) (aggregate is in the plyr package)
state_data <- aggregate(user_current_balance ~ user_address_state_abv, data = user_info, FUN=sum)
# rename the values to be consistent with the shape file state names
state_data <- rename(state_data, c("user_address_state_abv"="st", "user_current_balance"="total_balance"))
# merge on values to shape file
merged_info <- merge(x=states_info, y = state_data, by = "st", all = TRUE)
# create the choropleth (heat) map
png(filename="chorolpleth_map_by_state_example.png", width=1440, height=950)
# plot the map!
qplot(
long, lat, data = merged_info, group = group,
fill = total_balance, geom = "polygon"
)
dev.off()
library(RCurl)
library(XML)
url <-'http://www.imdb.com/title/tt0111161/criticreviews?ref_=tt_ov_rt'
raw <- getURL(url)
data <- htmlParse(raw)
# get the first text
# you can get the xpath from chrome
xpath <- '//*[@id="main"]/div[1]/table/tbody/tr[1]/td[2]/div'
getNodeSet(data,xpath)
# get all text
xpath <- '//tr[@itemprop="reviews"]/td[2]/div'
nodes <- getNodeSet(data,xpath)
text <- sapply(nodes,xmlValue)
data('iris', package='datasets')
data
head(iris)
library(ggplot2)
library(WDI)
DF <- WDI(country=c("CN","RU","BR","ZA","IN"),
indicator="NY.GDP.MKTP.KD.ZG",
start=1990, end=2012)
head(DF,2)
ggtitle("Annual GDP Growth rate (%)")+ylab("")
head(DF,2)
ggplot(DF, aes(year, NY.GDP.MKTP.KD.ZG, color=country))+
geom_line()+geom_point()+xlab("Year")+
ggtitle("Annual GDP Growth rate (%)")+ylab("")
